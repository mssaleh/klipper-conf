# WARNING. DO NOT EDIT THIS FILE.
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

[gcode_macro START_PRINT]
gcode:
      G28
      M140 S60 # set bed leveling temp
      M104 S150 # set extruder leveling temp
      M109 S150 # wait for extruder leveling temp
      M190 S60 # wait for bed leveling temp
      G28 Z
      BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=True
      M140 S{params.BED_TEMP|default(printer.heater_bed.target, true) } # set bed temp
      M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) } # set extruder temp
      M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) } # wait for extruder temp
      M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) } # wait for bed temp
      PRIME_LINE

[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
      SAVE_GCODE_STATE NAME=prime_line_state
      G90 # Absolute positioning
      M82 # Absolute extrusion
      M117 Priming nozzle with prime line..
      RESPOND MSG="Priming nozzle with prime line.."
      G1 Z5 F3000 # Lift 5 mm
      G1 X{printer.toolhead.axis_minimum.x + 1} Y{printer.toolhead.axis_minimum.y + 1} F3000 # Move to prime area
      G1 Z0.3 F3000 # Get ready to prime
      G92 E0 # Reset extrusion distance
      G1 Y{printer.toolhead.axis_minimum.y + 100} E16 F1200 # Prime nozzle
      G1 P4000 # wait for blob
      G1 Y{printer.toolhead.axis_minimum.y + 120} F6000 # Wipe
      RESTORE_GCODE_STATE NAME=prime_line_state

[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
      M400 # wait for buffer to clear
      G92 E0 # zero the extruder
      G1 E-10.0 F3600 # retract filament
      G91 # relative positioning
      #   Get Boundaries
      {% set X_MIN = printer.toolhead.axis_minimum.x|default(0)|float %}
      {% set Y_MAX = printer.toolhead.axis_maximum.y|default(235)|float %}
      {% set max_z = printer.toolhead.axis_maximum.z|default(270)|float %}
      {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
      {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
      {% endif %}
      G0 Z{z_safe} F3600 # move nozzle up and present print
      G90
      G0 X{X_MIN} Y{Y_MAX} F3600
      TURN_OFF_HEATERS
      M107 # turn off fan
      M84 # Disable steppers

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
      {% if printer.pause_resume.is_paused == False %}
        PAUSE
      {% endif %}
      G90
      TURN_OFF_HEATERS
      M107 # turn off fan
      CANCEL_PRINT_BASE
      M84

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_retract_extrude: 10.0
variable_extrude_extrude: 12.0
gcode:
      {% if printer.virtual_sdcard.is_active == True %}
        {% if printer.pause_resume.is_paused == False %}
          ##### read E from pause macro #####
          {% set E = printer["gcode_macro PAUSE"].retract_extrude|float %}
          ##### set park positon for x and y #####
          # default is your max/min position from your printer.cfg
          {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
          {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
          ##### calculate save lift position #####
          {% set max_z = printer.toolhead.axis_maximum.z|float %}
          {% set act_z = printer.toolhead.position.z|float %}
          {% if act_z < (max_z - 2.0) %}
            {% set z_safe = 2.0 %}
          {% else %}
            {% set z_safe = max_z - act_z %}
          {% endif %}
          ##### end of definitions #####
          PAUSE_BASE
          G91
          {% if printer.extruder.can_extrude|lower == 'true' %}
            G1 E-{E} F2100
          {% else %}
            {action_respond_info("Extruder not hot enough")}
          {% endif %}
          {% if "xyz" in printer.toolhead.homed_axes %}
            G1 Z{z_safe} F900
            G90
            G1 X{x_park} Y{y_park} F6000
          {% else %}
            {action_respond_info("Printer not homed")}
          {% endif %} 
        {% endif %}
      {% endif %}
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
      {% if printer.pause_resume.is_paused %}
        ##### read E from pause macro #####
        {% set E = printer["gcode_macro PAUSE"].extrude_extrude|float %}
        #### get VELOCITY parameter if specified ####
        {% if 'VELOCITY' in params|upper %}
          {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
        {%else %}
          {% set get_params = "" %}
        {% endif %}
        ##### end of definitions #####
        {% if printer.extruder.can_extrude|lower == 'true' %}
          G91
          G1 E{E} F2100
        {% else %}
          {action_respond_info("Extruder not hot enough")}
        {% endif %}  
        RESUME_BASE {get_params}
      {% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
      ##### set park positon for x and y #####
      # default is your max posion from your printer.cfg
      {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
      {% set y_park = printer.toolhead.axis_maximum.y|float - 10.0 %}
      {% set z_park_delta = 2.0 %}
      ##### calculate save lift position #####
      {% set max_z = printer.toolhead.axis_maximum.z|float %}
      {% set act_z = printer.toolhead.position.z|float %}
      {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
      {% else %}
        {% set z_safe = max_z - act_z %}
      {% endif %}
      ##### end of definitions #####
      {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}
      {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z{z_safe} F900
        G90
        G1 X{x_park} Y{y_park} F6000
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
      {% else %}
        {action_respond_info("Printer not homed")}
      {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
      filament_load
      # SAVE_GCODE_STATE NAME=load_state
      # G91
      # # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
      # {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
      #   M117 Heating...
      #   M104 S{params.TEMP|default(220, true)}
      #   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
      # {% endif %}
      # M117 Loading filament...
      # # Load the filament into the hotend area.
      # # G0 E100 F600
      # G0 E15 F100
      # # Wait a secod
      # G4 P1000
      # # Purge
      # G0 E40 F100
      # # Wait for purge to complete
      # M400
      # M117 Filament loaded!
      # RESPOND MSG="Filament loaded!"
      # RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
      filament_unload
      # SAVE_GCODE_STATE NAME=unload_state
      # G91
      # {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
      #   M117 Heating...
      #   # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
      #   M104 S{params.TEMP|default(220, true)}
      #   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
      # {% endif %}
      # M117 Unloading filament...
      # # Melt the enlarged tip
      # G0 E10 F150
      # # Extract filament to cold end area 
      # G0 E-5 F3600
      # # Wait for three seconds
      # G4 P3000
      # # Push back the filament to smash any stringing 
      # G0 E5 F3600
      # # Extract back fast in to the cold zone 
      # G0 E-15 F3600
      # # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
      # G0 E-130 F300
      # M117 Filament unloaded!
      # RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
      # RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro PID_HOTEND]
description: PID calibration of the hotend with set temp.
gcode:
      M106
      {% set TARGET_TEMP = params.TARGET_TEMP|default(230)|float %} 
      PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
      SAVE_CONFIG

[gcode_macro PID_BED]
description: PID calibration of the hotend with set temp.
gcode:
      {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
      PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
      SAVE_CONFIG

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
      ## Move head and retract only if not already in the pause state and park set to true
      {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        _TOOLHEAD_PARK_PAUSE_CANCEL
      {% endif %}
      TURN_OFF_HEATERS
  M106 S0
      CANCEL_PRINT_BASE

[gcode_macro BED_LEVELING]
gcode:
      G28
      G1 Z5 F600
      BED_MESH_CALIBRATE

[gcode_macro M600]
gcode:
      PAUSE
      M117 Please load new filament and/or resume
      RESPOND MSG="Please load new filament and/or resume"

[gcode_macro PA_CALIBRTION]
gcode:
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
      TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro SET_RETRACTIONLENGTH]
gcode:
      SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
      GET_RETRACTION

[gcode_macro SCREWS_LEVELING]
gcode:
      screws_tilt_calculate
